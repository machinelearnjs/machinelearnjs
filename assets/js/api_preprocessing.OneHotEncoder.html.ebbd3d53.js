"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[747],{5573:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>p});var t=a(2288);const e={},o=(0,a(7433).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="preprocessing-onehotencoder" tabindex="-1"><a class="header-anchor" href="#preprocessing-onehotencoder"><span>preprocessing.OneHotEncoder</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> enc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneHotEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> planetList <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line"> <span class="token punctuation">{</span> planet<span class="token operator">:</span> <span class="token string">&#39;mars&#39;</span><span class="token punctuation">,</span> isGasGiant<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"> <span class="token punctuation">{</span> planet<span class="token operator">:</span> <span class="token string">&#39;saturn&#39;</span><span class="token punctuation">,</span> isGasGiant<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"> <span class="token punctuation">{</span> planet<span class="token operator">:</span> <span class="token string">&#39;jupiter&#39;</span><span class="token punctuation">,</span> isGasGiant<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> encodeInfo <span class="token operator">=</span> enc<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>planetList<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>\n<span class="line"> dataKeys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isGasGiant&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line"> labelKeys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;planet&#39;</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// encodeInfo.data -&gt; [ [ -1, 0, 1, 0, 0 ], [ 0, 1, 0, 1, 0 ], [ 1, 1, 0, 0, 1 ] ]</span></span>\n<span class="line"><span class="token keyword">const</span> decodedInfo <span class="token operator">=</span> enc<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodeInfo<span class="token punctuation">.</span>data<span class="token punctuation">,</span> encodeInfo<span class="token punctuation">.</span>decoders<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// gives you back the original value, which is `planetList`</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-decode">decode</a></p></li><li><p><a href="#%CE%BB-encode">encode</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>OneHotEncoder</strong>()</p><p>Defined in</p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead></table><p><strong>Returns:</strong> OneHotEncoder</p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-decode" tabindex="-1"><a class="header-anchor" href="#λ-decode"><span>λ decode</span></a></h3><p>Decode the encoded data back into its original format</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L188" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:188</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>encoded</td><td>any</td><td></td><td></td></tr><tr><td>decoders</td><td>any</td><td></td><td></td></tr></tbody></table><p><strong>Returns:</strong></p><p>any[]</p><h3 id="λ-encode" tabindex="-1"><a class="header-anchor" href="#λ-encode"><span>λ encode</span></a></h3><p>encode data according to dataKeys and labelKeys</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L105" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:105</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>any</td><td>null</td><td>list of records to encode</td></tr><tr><td>dataKeys</td><td>string[]</td><td>null</td><td></td></tr><tr><td>labelKeys</td><td>string[]</td><td>null</td><td></td></tr></tbody></table><p><strong>Returns:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>any[]</td><td>Encoded data</td></tr><tr><td>decoders</td><td>any[]</td><td>Decoder</td></tr></tbody></table>',31)]))}]]),p=JSON.parse('{"path":"/api/preprocessing.OneHotEncoder.html","title":"preprocessing.OneHotEncoder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"λ decode","slug":"λ-decode","link":"#λ-decode","children":[]},{"level":3,"title":"λ encode","slug":"λ-encode","link":"#λ-encode","children":[]}],"git":{},"filePathRelative":"api/preprocessing.OneHotEncoder.md"}')}}]);