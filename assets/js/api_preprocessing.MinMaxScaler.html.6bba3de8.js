"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7955],{5525:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>r});var t=a(2288);const e={},p=(0,a(7433).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="preprocessing-minmaxscaler" tabindex="-1"><a class="header-anchor" href="#preprocessing-minmaxscaler"><span>preprocessing.MinMaxScaler</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MinMaxScaler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/preprocessing&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> minmaxScaler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinMaxScaler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> featureRange<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Fitting an 1D matrix</span></span>\n<span class="line">minmaxScaler<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> minmaxScaler<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// result = [ 0, 0.5, 1 ]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Fitting a 2D matrix</span></span>\n<span class="line"><span class="token keyword">const</span> minmaxScaler2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinMaxScaler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> featureRange<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">minmaxScaler2<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result2 <span class="token operator">=</span> minmaxScaler2<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// result2 = [ [ 0, 0.2, 0.4000000000000001 ] ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-fit-transform">fit_transform</a></p></li><li><p><a href="#%CE%BB-inverse-transform">inverse_transform</a></p></li><li><p><a href="#%CE%BB-transform">transform</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>MinMaxScaler</strong>(featureRange: <em>`object`</em>)</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L415" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:415</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.featureRange</td><td>number[]</td><td>...</td><td></td></tr></tbody></table><p><strong>Returns:</strong> MinMaxScaler</p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Compute the minimum and maximum to be used for later scaling.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L431" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:431</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[] or number[][]</td><td>null</td><td>Array or sparse-matrix data input</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-fit-transform" tabindex="-1"><a class="header-anchor" href="#λ-fit-transform"><span>λ fit_transform</span></a></h3><p>Fit to data, then transform it.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L459" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:459</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[] or number[][]</td><td></td><td>Original input vector</td></tr></tbody></table><p><strong>Returns:</strong></p><h3 id="λ-inverse-transform" tabindex="-1"><a class="header-anchor" href="#λ-inverse-transform"><span>λ inverse_transform</span></a></h3><p>Undo the scaling of X according to feature_range.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L488" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:488</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[]</td><td>null</td><td>Scaled input vector</td></tr></tbody></table><p><strong>Returns:</strong></p><p>number[]</p><h3 id="λ-transform" tabindex="-1"><a class="header-anchor" href="#λ-transform"><span>λ transform</span></a></h3><p>Scaling features of X according to feature_range.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L468" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:468</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[] or number[][]</td><td>null</td><td>Original input vector</td></tr></tbody></table><p><strong>Returns:</strong></p>',43)]))}]]),r=JSON.parse('{"path":"/api/preprocessing.MinMaxScaler.html","title":"preprocessing.MinMaxScaler","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ fit_transform","slug":"λ-fit-transform","link":"#λ-fit-transform","children":[]},{"level":3,"title":"λ inverse_transform","slug":"λ-inverse-transform","link":"#λ-inverse-transform","children":[]},{"level":3,"title":"λ transform","slug":"λ-transform","link":"#λ-transform","children":[]}],"git":{},"filePathRelative":"api/preprocessing.MinMaxScaler.md"}')}}]);