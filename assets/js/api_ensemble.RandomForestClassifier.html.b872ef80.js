"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7465],{5697:(s,n,e)=>{e.r(n),e.d(n,{comp:()=>r,data:()=>o});var a=e(2288);const t={},r=(0,e(7433).A)(t,[["render",function(s,n){return(0,a.uX)(),(0,a.CE)("div",null,n[0]||(n[0]=[(0,a.Fv)('<h1 id="ensemble-randomforestclassifier" tabindex="-1"><a class="header-anchor" href="#ensemble-randomforestclassifier"><span>ensemble.RandomForestClassifier</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> RandomForestClassifier <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/ensemble&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> randomForest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomForestClassifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">randomForest<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Results in a value such as [ &#39;0&#39;, &#39;2&#39; ].</span></span>\n<span class="line"><span class="token comment">// Predictions will change as we have not set a seed value.</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h3><ul><li><p><a href="#%E2%96%B8-nestimator">nEstimator</a></p></li><li><p><a href="#%E2%96%B8-randomstate">randomState</a></p></li><li><p><a href="#%E2%96%B8-trees">trees</a></p></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-fromjson">fromJSON</a></p></li><li><p><a href="#%CE%BB-predict">predict</a></p></li><li><p><a href="#%CE%BB-tojson">toJSON</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>RandomForestClassifier</strong>(__namedParameters: <em>`object`</em>)</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L20" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:20</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.nEstimator</td><td>number</td><td>10</td><td></td></tr><tr><td>options.random_state</td><td>number</td><td>null</td><td></td></tr></tbody></table><p><strong>Returns:</strong> RandomForestClassifier</p><h1 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1"><span>Properties</span></a></h1><hr><h3 id="▸-nestimator" tabindex="-1"><a class="header-anchor" href="#▸-nestimator"><span>▸ nEstimator</span></a></h3><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L12" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:12</a></p><h3 id="▸-randomstate" tabindex="-1"><a class="header-anchor" href="#▸-randomstate"><span>▸ randomState</span></a></h3><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L13" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:13</a></p><h3 id="▸-trees" tabindex="-1"><a class="header-anchor" href="#▸-trees"><span>▸ trees</span></a></h3><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L11" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:11</a></p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Build a forest of trees from the training set (X, y).</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L45" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:45</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[][]</td><td>null</td><td>array-like or sparse matrix of shape = [n_samples, n_features]</td></tr><tr><td>y</td><td>number[]</td><td>null</td><td>array-like, shape = [n_samples] or [n_samples, n_outputs]</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-fromjson" tabindex="-1"><a class="header-anchor" href="#λ-fromjson"><span>λ fromJSON</span></a></h3><p>Restore the model from a checkpoint</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L80" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:80</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.trees</td><td>any[]</td><td>null</td><td></td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-predict" tabindex="-1"><a class="header-anchor" href="#λ-predict"><span>λ predict</span></a></h3><p>Predict class for X.</p><p>The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L126" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:126</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[][]</td><td>null</td><td>array-like or sparse matrix of shape = [n_samples]</td></tr></tbody></table><p><strong>Returns:</strong></p><p>any[]</p><h3 id="λ-tojson" tabindex="-1"><a class="header-anchor" href="#λ-tojson"><span>λ toJSON</span></a></h3><p>Returning the current model&#39;s checkpoint</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/ensemble/forest.ts#L65" target="_blank" rel="noopener noreferrer">ensemble/forest.ts:65</a></p><p><strong>Returns:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>trees</td><td>any[]</td><td>Decision trees</td></tr></tbody></table>',54)]))}]]),o=JSON.parse('{"path":"/api/ensemble.RandomForestClassifier.html","title":"ensemble.RandomForestClassifier","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"▸ nEstimator","slug":"▸-nestimator","link":"#▸-nestimator","children":[]},{"level":3,"title":"▸ randomState","slug":"▸-randomstate","link":"#▸-randomstate","children":[]},{"level":3,"title":"▸ trees","slug":"▸-trees","link":"#▸-trees","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ fromJSON","slug":"λ-fromjson","link":"#λ-fromjson","children":[]},{"level":3,"title":"λ predict","slug":"λ-predict","link":"#λ-predict","children":[]},{"level":3,"title":"λ toJSON","slug":"λ-tojson","link":"#λ-tojson","children":[]}],"git":{},"filePathRelative":"api/ensemble.RandomForestClassifier.md"}')}}]);