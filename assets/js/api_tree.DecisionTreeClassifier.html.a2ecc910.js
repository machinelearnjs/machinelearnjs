"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7028],{8833:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>o});var t=a(2288);const e={},p=(0,a(7433).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="tree-decisiontreeclassifier" tabindex="-1"><a class="header-anchor" href="#tree-decisiontreeclassifier"><span>tree.DecisionTreeClassifier</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> DecisionTreeClassifier <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/tree&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;diameter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> decision <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecisionTreeClassifier</span><span class="token punctuation">(</span><span class="token punctuation">{</span> featureLabels<span class="token operator">:</span> features <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Green&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Yellow&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Red&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Red&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Yellow&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Grape&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Grape&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lemon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">decision<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">X</span><span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">decision<span class="token punctuation">.</span><span class="token function">printTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// try it out yourself! =)</span></span>\n<span class="line"></span>\n<span class="line">decision<span class="token punctuation">.</span><span class="token function">predict</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">X</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Green&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;Apple&#39; ]</span></span>\n<span class="line">decision<span class="token punctuation">.</span><span class="token function">predict</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">X</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ &#39;Apple&#39; ], [ &#39;Apple&#39;, &#39;Lemon&#39; ], [ &#39;Grape&#39;, &#39;Grape&#39; ], [ &#39;Grape&#39;, &#39;Grape&#39; ], [ &#39;Apple&#39;, &#39;Lemon&#39; ] ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> DecisionTreeClassifier <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/tree&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> decision <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecisionTreeClassifier</span><span class="token punctuation">(</span><span class="token punctuation">{</span> featureLabels<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">decision<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">X</span><span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">decision2<span class="token punctuation">.</span><span class="token function">predict</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1 ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-fromjson">fromJSON</a></p></li><li><p><a href="#%CE%BB-predict">predict</a></p></li><li><p><a href="#%CE%BB-printtree">printTree</a></p></li><li><p><a href="#%CE%BB-tojson">toJSON</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>DecisionTreeClassifier</strong>(__namedParameters: <em>`object`</em>)</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L152" target="_blank" rel="noopener noreferrer">tree/tree.ts:152</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.featureLabels</td><td>any[]</td><td>null</td><td></td></tr><tr><td>options.random_state</td><td>number</td><td>null</td><td></td></tr><tr><td>options.verbose</td><td>boolean</td><td>false</td><td></td></tr></tbody></table><p><strong>Returns:</strong> DecisionTreeClassifier</p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Fit date, which builds a tree</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L183" target="_blank" rel="noopener noreferrer">tree/tree.ts:183</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>string[][] or number[][] or boolean[][]</td><td>null</td><td>2D Matrix of training</td></tr><tr><td>y</td><td>string[] or number[] or boolean[]</td><td>null</td><td>1D Vector of target</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-fromjson" tabindex="-1"><a class="header-anchor" href="#λ-fromjson"><span>λ fromJSON</span></a></h3><p>Restores the model from a checkpoint</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L243" target="_blank" rel="noopener noreferrer">tree/tree.ts:243</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.featureLabels</td><td>string[]</td><td>null</td><td></td></tr><tr><td>options.random_state</td><td>number</td><td>null</td><td></td></tr><tr><td>options.tree</td><td>any</td><td>null</td><td></td></tr><tr><td>options.verbose</td><td>boolean</td><td>false</td><td></td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-predict" tabindex="-1"><a class="header-anchor" href="#λ-predict"><span>λ predict</span></a></h3><p>Predict multiple rows</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L196" target="_blank" rel="noopener noreferrer">tree/tree.ts:196</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>string[][] or number[][] or boolean[][]</td><td>[]</td><td>2D Matrix of testing data</td></tr></tbody></table><p><strong>Returns:</strong></p><p>any[]</p><h3 id="λ-printtree" tabindex="-1"><a class="header-anchor" href="#λ-printtree"><span>λ printTree</span></a></h3><p>Recursively print the tree into console</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L264" target="_blank" rel="noopener noreferrer">tree/tree.ts:264</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>spacing</td><td>string</td><td>&#39;&#39;</td><td>Spacing used when printing the tree into the terminal</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-tojson" tabindex="-1"><a class="header-anchor" href="#λ-tojson"><span>λ toJSON</span></a></h3><p>Returns the model checkpoint</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/tree/tree.ts#L210" target="_blank" rel="noopener noreferrer">tree/tree.ts:210</a></p><p><strong>Returns:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>featureLabels</td><td>string[]</td><td>Literal names for each feature to be used while printing the tree out as a string</td></tr><tr><td>random_state</td><td>number</td><td>A seed value for the random engine</td></tr><tr><td>tree</td><td>any</td><td>The model&#39;s state</td></tr><tr><td>verbose</td><td>boolean</td><td>Logs the progress of the tree construction as console.info</td></tr></tbody></table>',51)]))}]]),o=JSON.parse('{"path":"/api/tree.DecisionTreeClassifier.html","title":"tree.DecisionTreeClassifier","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ fromJSON","slug":"λ-fromjson","link":"#λ-fromjson","children":[]},{"level":3,"title":"λ predict","slug":"λ-predict","link":"#λ-predict","children":[]},{"level":3,"title":"λ printTree","slug":"λ-printtree","link":"#λ-printtree","children":[]},{"level":3,"title":"λ toJSON","slug":"λ-tojson","link":"#λ-tojson","children":[]}],"git":{},"filePathRelative":"api/tree.DecisionTreeClassifier.md"}')}}]);