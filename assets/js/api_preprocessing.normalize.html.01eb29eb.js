"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2874],{2783:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>o});var e=a(2288);const t={},p=(0,a(7433).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="preprocessing-normalize" tabindex="-1"><a class="header-anchor" href="#preprocessing-normalize"><span>preprocessing.normalize</span></a></h1><p>â–¸ <strong>normalize</strong>(X: <em>`object`</em>, norm: <em>`object`</em>)</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> normalize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/preprocessing&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> norm<span class="token operator">:</span> <span class="token string">&#39;l2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// [ [ 0.4082482904638631, -0.4082482904638631, 0.8164965809277261 ],</span></span>\n<span class="line"><span class="token comment">// [ 1, 0, 0 ],</span></span>\n<span class="line"><span class="token comment">// [ 0, 0.7071067811865475, -0.7071067811865475 ] ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L700" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:700</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[][]</td><td>null</td><td>The data to normalize</td></tr><tr><td>options.norm</td><td>string</td><td>&#39;l2&#39;</td><td></td></tr></tbody></table><p><strong>Returns:</strong></p><p>number[][]</p>',9)]))}]]),o=JSON.parse('{"path":"/api/preprocessing.normalize.html","title":"preprocessing.normalize","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"git":{},"filePathRelative":"api/preprocessing.normalize.md"}')}}]);