"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8393],{6947:(n,a,t)=>{t.r(a),t.d(a,{comp:()=>r,data:()=>o});var s=t(2288);const e={},r=(0,t(7433).A)(e,[["render",function(n,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h1 id="feature-extraction-countvectorizer" tabindex="-1"><a class="header-anchor" href="#feature-extraction-countvectorizer"><span>feature_extraction.CountVectorizer</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CountVectorizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/feature_extraction&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> corpus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;deep learning ian good fellow learning jason shin shin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yoshua bengio&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> vocabCounts <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">fit_transform</span><span class="token punctuation">(</span>corpus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vocabCounts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ 0, 1, 1, 1, 1, 1, 2, 2, 0 ], [ 1, 0, 0, 0, 0, 0, 0, 0, 1 ] ]</span></span>\n<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span>vocabulary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { bengio: 0, deep: 1, fellow: 2, good: 3, ian: 4, jason: 5, learning: 6, shin: 7, yoshua: 8 }</span></span>\n<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span><span class="token function">getFeatureNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;bengio&#39;, &#39;deep&#39;, &#39;fellow&#39;, &#39;good&#39;, &#39;ian&#39;, &#39;jason&#39;, &#39;learning&#39;, &#39;shin&#39;, &#39;yoshua&#39; ]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> newVocabCounts <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ian good fellow jason duuog&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVocabCounts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ 0, 0, 1, 1, 1, 1, 0, 0, 0 ] ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h3><ul><li><a href="#%E2%96%B8-vocabulary">vocabulary</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-fit-transform">fit_transform</a></p></li><li><p><a href="#%CE%BB-getfeaturenames">getFeatureNames</a></p></li><li><p><a href="#%CE%BB-transform">transform</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>CountVectorizer</strong>()</p><p>Defined in</p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead></table><p><strong>Returns:</strong> CountVectorizer</p><h1 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1"><span>Properties</span></a></h1><hr><h3 id="▸-vocabulary" tabindex="-1"><a class="header-anchor" href="#▸-vocabulary"><span>▸ vocabulary</span></a></h3><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/feature_extraction/text.ts#L26" target="_blank" rel="noopener noreferrer">feature_extraction/text.ts:26</a></p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Learn a vocabulary dictionary of all tokens in the raw documents.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/feature_extraction/text.ts#L35" target="_blank" rel="noopener noreferrer">feature_extraction/text.ts:35</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>doc</td><td>string[]</td><td>null</td><td>An array of strings</td></tr></tbody></table><p><strong>Returns:</strong></p><p>this</p><h3 id="λ-fit-transform" tabindex="-1"><a class="header-anchor" href="#λ-fit-transform"><span>λ fit_transform</span></a></h3><p>fit transform applies</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/feature_extraction/text.ts#L46" target="_blank" rel="noopener noreferrer">feature_extraction/text.ts:46</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>doc</td><td>string[]</td><td>null</td><td>An array of strings</td></tr></tbody></table><p><strong>Returns:</strong></p><p>number[][]</p><h3 id="λ-getfeaturenames" tabindex="-1"><a class="header-anchor" href="#λ-getfeaturenames"><span>λ getFeatureNames</span></a></h3><p>Array mapping from feature integer indices to feature name</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/feature_extraction/text.ts#L70" target="_blank" rel="noopener noreferrer">feature_extraction/text.ts:70</a></p><p><strong>Returns:</strong></p><p>object</p><h3 id="λ-transform" tabindex="-1"><a class="header-anchor" href="#λ-transform"><span>λ transform</span></a></h3><p>Transform documents to document-term matrix. Extract token counts out of raw text documents using the vocabulary fitted with fit or the one provided to the constructor.</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/feature_extraction/text.ts#L61" target="_blank" rel="noopener noreferrer">feature_extraction/text.ts:61</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>doc</td><td>string[]</td><td>null</td><td>An array of strings</td></tr></tbody></table><p><strong>Returns:</strong></p><p>number[][]</p>',49)]))}]]),o=JSON.parse('{"path":"/api/feature_extraction.CountVectorizer.html","title":"feature_extraction.CountVectorizer","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"▸ vocabulary","slug":"▸-vocabulary","link":"#▸-vocabulary","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ fit_transform","slug":"λ-fit-transform","link":"#λ-fit-transform","children":[]},{"level":3,"title":"λ getFeatureNames","slug":"λ-getfeaturenames","link":"#λ-getfeaturenames","children":[]},{"level":3,"title":"λ transform","slug":"λ-transform","link":"#λ-transform","children":[]}],"git":{},"filePathRelative":"api/feature_extraction.CountVectorizer.md"}')}}]);