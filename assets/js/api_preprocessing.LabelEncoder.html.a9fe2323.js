"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2095],{6940:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>o});var t=a(2288);const e={},r=(0,a(7433).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="preprocessing-labelencoder" tabindex="-1"><a class="header-anchor" href="#preprocessing-labelencoder"><span>preprocessing.LabelEncoder</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> LabelEncoder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/preprocessing&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> labelEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LabelEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> labelX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;amsterdam&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;paris&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tokyo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">labelEncoder<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span>labelX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> transformX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tokyo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tokyo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;paris&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> labelEncoder<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// [ 2, 2, 1 ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-transform">transform</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>LabelEncoder</strong>()</p><p>Defined in</p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead></table><p><strong>Returns:</strong> LabelEncoder</p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Fit label encoder</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/label.ts#L25" target="_blank" rel="noopener noreferrer">preprocessing/label.ts:25</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>string[] or number[] or boolean[]</td><td>null</td><td>Input data in array or matrix</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-transform" tabindex="-1"><a class="header-anchor" href="#λ-transform"><span>λ transform</span></a></h3><p>Transform labels to normalized encoding.</p><p>Given classes of [&#39;amsterdam&#39;, &#39;paris&#39;, &#39;tokyo&#39;]</p><p>It transforms [&quot;tokyo&quot;, &quot;tokyo&quot;, &quot;paris&quot;]</p><p>Into [2, 2, 1]</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/label.ts#L40" target="_blank" rel="noopener noreferrer">preprocessing/label.ts:40</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>string[] or number[] or boolean[]</td><td>null</td><td>Input data to transform according to the fitted state</td></tr></tbody></table><p><strong>Returns:</strong></p><p>any[]</p>',34)]))}]]),o=JSON.parse('{"path":"/api/preprocessing.LabelEncoder.html","title":"preprocessing.LabelEncoder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ transform","slug":"λ-transform","link":"#λ-transform","children":[]}],"git":{},"filePathRelative":"api/preprocessing.LabelEncoder.md"}')}}]);