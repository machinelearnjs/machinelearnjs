"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[427],{9604:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>p});var t=a(2288);const e={},r=(0,a(7433).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="preprocessing-binarizer" tabindex="-1"><a class="header-anchor" href="#preprocessing-binarizer"><span>preprocessing.Binarizer</span></a></h1><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Binarizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;machinelearn/preprocessing&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> binX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> binarizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binarizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> threshold<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> binarizer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>binX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// [ [ 1, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h3><ul><li><a href="#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h3><ul><li><p><a href="#%CE%BB-fit">fit</a></p></li><li><p><a href="#%CE%BB-transform">transform</a></p></li></ul><h1 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1"><span>Constructors</span></a></h1><hr><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h3><p>⊕ <strong>Binarizer</strong>(__namedParameters: <em>`object`</em>)</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L520" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:520</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options.copy</td><td>boolean</td><td>true</td><td></td></tr><tr><td>options.threshold</td><td>number</td><td>0</td><td></td></tr></tbody></table><p><strong>Returns:</strong> Binarizer</p><h1 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h1><hr><h3 id="λ-fit" tabindex="-1"><a class="header-anchor" href="#λ-fit"><span>λ fit</span></a></h3><p>Currently fit does nothing</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L543" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:543</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[][]</td><td>null</td><td>Does nothing</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h3 id="λ-transform" tabindex="-1"><a class="header-anchor" href="#λ-transform"><span>λ transform</span></a></h3><p>Transforms matrix into binarized form X = [[ 1., -1., 2.], [ 2., 0., 0.], [ 0., 1., -1.]] becomes array([[ 1., 0., 1.], [ 1., 0., 0.], [ 0., 1., 0.]])</p><p>Defined in <a href="https://github.com/machinelearnjs/machinelearnjs/blob/master/src/lib/preprocessing/data.ts#L562" target="_blank" rel="noopener noreferrer">preprocessing/data.ts:562</a></p><p><strong>Parameters:</strong></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>X</td><td>number[][]</td><td>null</td><td>The data to binarize.</td></tr></tbody></table><p><strong>Returns:</strong></p><p>any[]</p>',31)]))}]]),p=JSON.parse('{"path":"/api/preprocessing.Binarizer.html","title":"preprocessing.Binarizer","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"λ fit","slug":"λ-fit","link":"#λ-fit","children":[]},{"level":3,"title":"λ transform","slug":"λ-transform","link":"#λ-transform","children":[]}],"git":{},"filePathRelative":"api/preprocessing.Binarizer.md"}')}}]);