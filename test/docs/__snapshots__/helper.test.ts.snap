// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`docs:helper constructParamTable should build a table for param1 1`] = `
"| Param | Type | Default | Description |
| ------ | ------ | ------ | ------ |
| type | string |  | 
| options.delimiter | string | ',' | 
| options.lastIsTarget |  | true | 
| options.targetType | string | 'float' | 
| options.trainType | string | 'float' | 
"
`;

exports[`docs:helper constructParamTable should build a table for params with Type1DMatrix 1`] = `
"| Param | Type | Default | Description |
| ------ | ------ | ------ | ------ |
| X | number |  | training values
| y | number |  | target values
"
`;

exports[`docs:helper constructParamTable should build table for params with Type2DMatrix 1`] = `
"| Param | Type | Default | Description |
| ------ | ------ | ------ | ------ |
| X | number[][] | null | Matrix of data
| y | number[] | null | Matrix of targets
"
`;

exports[`docs:helper constructParamTable should build table for params with Type2DMatrix of multiple types 1`] = `
"| Param | Type | Default | Description |
| ------ | ------ | ------ | ------ |
| X | number[][] | null | array-like or sparse matrix of shape = [n_samples, n_features]
| y | unknown | null | array-like, shape = [n_samples] or [n_samples, n_outputs]
"
`;

exports[`docs:helper docs:test:renderNewLine should render a newline upon calling the method 1`] = `
"
"
`;

exports[`docs:helper filterByKind should filter all constructor 1`] = `
{
  "payload": [
    {
      "comment": {
        "shortText": "model training epochs",
      },
      "flags": {},
      "id": 724,
      "kind": 512,
      "kindString": "Constructor",
      "name": "zzzz",
      "sources": [
        {
          "character": 10,
          "fileName": "linear_model/stochastic_gradient.ts",
          "line": 126,
        },
      ],
      "type": {
        "name": "number",
        "type": "intrinsic",
      },
    },
  ],
  "result": true,
}
`;

exports[`docs:helper filterByKind should filter all public Variables 1`] = `
{
  "payload": [
    {
      "comment": {
        "shortText": "Model training weights",
      },
      "id": 725,
      "kind": 32,
      "kindString": "Variable",
      "name": "weights",
      "sources": [
        {
          "character": 11,
          "fileName": "linear_model/stochastic_gradient.ts",
          "line": 130,
        },
      ],
      "type": {
        "elementType": {
          "name": "number",
          "type": "intrinsic",
        },
        "type": "array",
      },
    },
  ],
  "result": true,
}
`;

exports[`docs:helper filterByTag should find a tag example 1`] = `
{
  "payload": [
    {
      "tag": "example",
      "text": "
import { SGDRegressor } from 'kalimdor/linear_model';
const reg = new SGDRegressor();
const X = [[0., 0.], [1., 1.]];
const y = [0, 1];
reg.fit(X, y);
reg.predict([[2., 2.]]); // result: [ 1.281828588248001 ]

",
    },
  ],
  "result": true,
}
`;

exports[`docs:helper isSignatureValid should return true for the 2nd child 1`] = `
{
  "flags": {
    "isExported": true,
  },
  "id": 133,
  "kind": 512,
  "kindString": "Constructor",
  "name": "constructor",
  "signatures": [
    {
      "flags": {},
      "id": 134,
      "kind": 16384,
      "kindString": "Constructor signature",
      "name": "new KMeans",
      "parameters": [
        {
          "defaultValue": " {
      distance: 'euclidean',
      k: 3,
      maxIteration: 300
    }",
          "flags": {},
          "id": 135,
          "kind": 32768,
          "kindString": "Parameter",
          "name": "options",
          "type": {
            "id": 127,
            "name": "KMeansOptions",
            "type": "reference",
          },
        },
      ],
      "type": {
        "id": 132,
        "name": "KMeans",
        "type": "reference",
      },
    },
  ],
  "sources": [
    {
      "character": 31,
      "fileName": "cluster/k_means.ts",
      "line": 45,
    },
  ],
}
`;

exports[`docs:helper renderMethodReturnType should build a toJSON return type 1`] = `
"| Param | Type | Description |
| ------ | ------ | ------ |
| classes | any[] | classes used for KNN tree
| distance | any | Choice of distance function, should choose between euclidean | manhattan
| k | number | Number of neighbors to classify
| tree | any | KNN tree
| type | string | Type of algorithm to use, choose between kdtree(default) | balltree | simple
"
`;
