// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tree:DecisionTreeClassifier Should not fit if invalid data is given 1`] = `
ValidationError {
  "message": "validateFitInputs received a non-array input X",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier Should not fit if invalid data is given 2`] = `
ValidationError {
  "message": "validateFitInputs received a non-array input X",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier Should not fit if invalid data is given 3`] = `
ValidationError {
  "message": "validateFitInputs received a non-array input X",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier Should not fit if invalid data is given 4`] = `[TypeError: Cannot read properties of undefined (reading 'buildTree')]`;

exports[`tree:DecisionTreeClassifier Should not fit if invalid data is given 5`] = `
ValidationError {
  "message": "validateFitInputs received a non-array input X",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier should not predict if invalid data is given 1`] = `
ValidationError {
  "message": "validateMatrix2D has received a non-array argument",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier should not predict if invalid data is given 2`] = `
ValidationError {
  "message": "validateMatrix2D has received a non-array argument",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier should not predict if invalid data is given 3`] = `
ValidationError {
  "message": "validateMatrix2D has received a non-array argument",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier should not predict if invalid data is given 4`] = `
Validation2DMatrixError {
  "message": "The matrix is not 2D shaped: [] of [0]",
  "name": "Validation2DMatrixError",
}
`;

exports[`tree:DecisionTreeClassifier should not predict if invalid data is given 5`] = `
ValidationError {
  "message": "validateMatrix2D has received a non-array argument",
  "name": "ValidationError",
}
`;

exports[`tree:DecisionTreeClassifier should return a correct class counts for fruitY 1`] = `
{
  "Apple": {
    "count": 1,
    "value": "Apple",
  },
  "Grape": {
    "count": 1,
    "value": "Grape",
  },
  "Lemon": {
    "count": 1,
    "value": "Lemon",
  },
}
`;

exports[`tree:DecisionTreeClassifier should use fruitX and print a correct tree 1`] = `""`;
